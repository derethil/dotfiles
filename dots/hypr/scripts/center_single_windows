#!/bin/sh

# This script is used to automatically float and center windows when
# they are the only window on a workspace. It is meant to be used
# with ultrawide monitors, where a single window can be too wide to
# be comfortable to look at.

# NOTE: It does not work with multiple monitors yet.

# Constants

WINDOW_WIDTH=$1
WINDOW_HEIGHT=$2

TEMP_DIR=/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE

HYPRLAND_SOCKET_PATH=$TEMP_DIR/.socket2.sock
HANDLED_LIST_PATH=$TEMP_DIR/handled_single_workspaces

# List of window classes to ignore
NO_HANDLE_LIST=(steam)

if ([ -z "$WINDOW_WIDTH" ] || [ -z "$WINDOW_HEIGHT" ]); then
  echo "Usage: $0 <window_width> <window_height>"
  exit 1
fi

# Handling of Single Windows List

ensure_list_exists() {
  if [ ! -f "$HANDLED_LIST_PATH" ]; then
    mkdir -p /tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE
    touch "$HANDLED_LIST_PATH"
  fi
}

# Expects workspace_id and window_id
add_handled() {
  workspace_id=$1
  window_address=$2
  echo "$workspace_id: $window_address" >> "$HANDLED_LIST_PATH"
}

# Expects either workspace_id= or window_address=
remove_handled() {
  field=$(echo $1 | cut -d '=' -f 1)
  value=$(echo $1 | cut -d '=' -f 2)

  if [ "$field" = "workspace_id" ]; then
    sed -i "/$value:/d" "$HANDLED_LIST_PATH"
  elif [ "$field" = "window_address" ]; then
    sed -i "/: $value/d" "$HANDLED_LIST_PATH"
  fi
}

# Expects either workspace_id= or window_address=
check_handled() {
  field=$(echo $1 | cut -d '=' -f 1)
  value=$(echo $1 | cut -d '=' -f 2)

  if [ "$field" = "workspace_id" ]; then
    grep "$value:" "$HANDLED_LIST_PATH"
  elif [ "$field" = "window_address" ]; then
    grep ": $value" "$HANDLED_LIST_PATH"
  fi
}

# Handling of Hyprland Events

handle() {
  case $1 in (workspace* | destroyworkspace* | closewindow* | createworkspace* | openwindow*)
    # Ensure Single Windows List Exists
    ensure_list_exists

    # Get General Information
    workspace_info=$(hyprctl activeworkspace -j);
    workspace_id=$(echo "$workspace_info" | jq .id)

    num_windows=$(echo $workspace_info | jq .windows)
    lastwindow_addr=$(echo $workspace_info | jq --raw-output .lastwindow)

    # Ignore if Last Window Id's Class is in No Handle List
    lastwindow_class=$(hyprctl clients -j | jq --raw-output ".[] | select(.address == \"$lastwindow_addr\") | .class")
    if [[ $(echo ${NO_HANDLE_LIST[@]} | grep -Fw "$lastwindow_class") ]]; then
      return;
    fi

    # Fires if the workspace is empty
    if [ "$num_windows" -eq 0 ]; then
      # Remove Window from Single Windows List
      remove_handled "workspace_id=$workspace_id"
      return;
    fi

    # Note: I was lazy so this is kind of confusing;
    # we check if the workspace id is in the list by ensuring window_address_in_list is not empty
    # and vice versa for window_address_in_list
    window_address_in_list=$(check_handled "workspace_id=$workspace_id" | awk '{ print $2 }')
    workspace_id_in_list=$(check_handled "window_address=$lastwindow_addr" | awk '{ print $1 }')

    # Fires if the workspace has a single window that is not in the list
    if [ "$num_windows" -eq 1 ] && [ -z "$window_address_in_list" ]; then
      # Float, Resize, and Center Window
      hyprctl --batch "dispatch togglefloating address:$lastwindow_addr; dispatch resizewindowpixel exact $WINDOW_WIDTH $WINDOW_HEIGHT,address:$lastwindow_addr; dispatch centerwindow 1";

      # Add Window to Single Windows List
      add_handled "$workspace_id" "$lastwindow_addr"
      return;
    fi

    # Fires if the workspace has multiples windows and workspace id is in the list
    if [ "$num_windows" -gt 1 ] && [ ! -z "$window_address_in_list" ]; then
      # Remove Window from Single Windows List
      remove_handled "workspace_id=$workspace_id"

      # Unfloat
      hyprctl --batch "dispatch togglefloating address:$window_address_in_list; dispatch layoutmsg swapwithmaster child";
      return;
    fi

    # Fires if the workspace has multiples windows and window address is in the list
    if [ "$num_windows" -gt 1 ] && [ ! -z "$workspace_id_in_list" ]; then
      # Remove Window from Single Windows List
      remove_handled "window_address=$lastwindow_addr"

      # Unfloat
      hyprctl dispatch togglefloating address:$lastwindow_addr;
      return;
    fi
  esac
}

# Main Loop

socat -U - UNIX-CONNECT:$HYPRLAND_SOCKET_PATH | while read -r line; do
  handle "$line"
done
